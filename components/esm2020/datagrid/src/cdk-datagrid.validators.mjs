import { Validators as _Validators, } from '@angular/forms';
export const defaultValidationError = {
    validationMessage: 'unknown error',
    validationCode: 'DEFAULT_UNKNOWN_ERROR',
};
export const mergeValidationErrors = (validationError1, validationError2 = defaultValidationError) => {
    return validationError1 ? { ...validationError1, ...validationError2 } : validationError1;
};
export class Validators {
    static min(min, validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.min(min)(control), validationError);
    }
    static max(max, validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.max(max)(control), validationError);
    }
    static required(validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.required(control), validationError);
    }
    static requiredTrue(validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.requiredTrue(control), validationError);
    }
    static email(validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.email(control), validationError);
    }
    static minLength(minLength, validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.minLength(minLength)(control), validationError);
    }
    static maxLength(maxLength, validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.maxLength(maxLength)(control), validationError);
    }
    static pattern(pattern, validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.pattern(pattern)(control), validationError);
    }
    static nullValidator() {
        return (control) => mergeValidationErrors(_Validators.nullValidator(control), {});
    }
    static nullAsyncValidator() {
        return control => {
            return new Promise(resolve => {
                resolve(null);
                // null validators does nothing!
                // so no control handling needed!
                // control.updateValueAndValidity();
            });
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWRhdGFncmlkLnZhbGlkYXRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvZGF0YWdyaWQvc3JjL2Nkay1kYXRhZ3JpZC52YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFLTCxVQUFVLElBQUksV0FBVyxHQUMxQixNQUFNLGdCQUFnQixDQUFDO0FBUXhCLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUEwQjtJQUMzRCxpQkFBaUIsRUFBRSxlQUFlO0lBQ2xDLGNBQWMsRUFBRSx1QkFBdUI7Q0FDeEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQ25DLGdCQUF5QyxFQUN6QyxtQkFBMEMsc0JBQXNCLEVBQ2xDLEVBQUU7SUFDaEMsT0FBTyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLGdCQUFnQixFQUFFLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7QUFDNUYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxPQUFPLFVBQVU7SUFDckIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFXLEVBQUUsa0JBQXlDLEVBQUU7UUFDakUsT0FBTyxDQUFDLE9BQXdCLEVBQUUsRUFBRSxDQUNsQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQVcsRUFBRSxrQkFBeUMsRUFBRTtRQUNqRSxPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFLENBQ2xDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQXlDLEVBQUU7UUFDekQsT0FBTyxDQUFDLE9BQXdCLEVBQUUsRUFBRSxDQUNsQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLGtCQUF5QyxFQUFFO1FBQzdELE9BQU8sQ0FBQyxPQUF3QixFQUFFLEVBQUUsQ0FDbEMscUJBQXFCLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQkFBeUMsRUFBRTtRQUN0RCxPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFLENBQ2xDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBaUIsRUFBRSxrQkFBeUMsRUFBRTtRQUM3RSxPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFLENBQ2xDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBaUIsRUFBRSxrQkFBeUMsRUFBRTtRQUM3RSxPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFLENBQ2xDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQ1osT0FBd0IsRUFDeEIsa0JBQXlDLEVBQUU7UUFFM0MsT0FBTyxDQUFDLE9BQXdCLEVBQUUsRUFBRSxDQUNsQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRCxNQUFNLENBQUMsYUFBYTtRQUNsQixPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFLENBQ2xDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxrQkFBa0I7UUFDdkIsT0FBTyxPQUFPLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxPQUFPLENBQU8sT0FBTyxDQUFDLEVBQUU7Z0JBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDZCxnQ0FBZ0M7Z0JBQ2hDLGlDQUFpQztnQkFDakMsb0NBQW9DO1lBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWJzdHJhY3RDb250cm9sLFxuICBBc3luY1ZhbGlkYXRvckZuLFxuICBWYWxpZGF0aW9uRXJyb3JzLFxuICBWYWxpZGF0b3JGbixcbiAgVmFsaWRhdG9ycyBhcyBfVmFsaWRhdG9ycyxcbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkVmFsaWRhdGlvbkVycm9ycyB7XG4gIHZhbGlkYXRpb25NZXNzYWdlPzogc3RyaW5nO1xuICB2YWxpZGF0aW9uQ29kZT86IHN0cmluZztcbiAgdmFsaWRhdGlvblR5cGU/OiAnZXJyb3InIHwgJ3dhcm5pbmcnO1xufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdFZhbGlkYXRpb25FcnJvcjogRmllbGRWYWxpZGF0aW9uRXJyb3JzID0ge1xuICB2YWxpZGF0aW9uTWVzc2FnZTogJ3Vua25vd24gZXJyb3InLFxuICB2YWxpZGF0aW9uQ29kZTogJ0RFRkFVTFRfVU5LTk9XTl9FUlJPUicsXG59O1xuXG5leHBvcnQgY29uc3QgbWVyZ2VWYWxpZGF0aW9uRXJyb3JzID0gKFxuICB2YWxpZGF0aW9uRXJyb3IxOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCxcbiAgdmFsaWRhdGlvbkVycm9yMjogRmllbGRWYWxpZGF0aW9uRXJyb3JzID0gZGVmYXVsdFZhbGlkYXRpb25FcnJvcixcbik6IEZpZWxkVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICByZXR1cm4gdmFsaWRhdGlvbkVycm9yMSA/IHsgLi4udmFsaWRhdGlvbkVycm9yMSwgLi4udmFsaWRhdGlvbkVycm9yMiB9IDogdmFsaWRhdGlvbkVycm9yMTtcbn07XG5cbmV4cG9ydCBjbGFzcyBWYWxpZGF0b3JzIHtcbiAgc3RhdGljIG1pbihtaW46IG51bWJlciwgdmFsaWRhdGlvbkVycm9yOiBGaWVsZFZhbGlkYXRpb25FcnJvcnMgPSB7fSk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT5cbiAgICAgIG1lcmdlVmFsaWRhdGlvbkVycm9ycyhfVmFsaWRhdG9ycy5taW4obWluKShjb250cm9sKSwgdmFsaWRhdGlvbkVycm9yKTtcbiAgfVxuXG4gIHN0YXRpYyBtYXgobWF4OiBudW1iZXIsIHZhbGlkYXRpb25FcnJvcjogRmllbGRWYWxpZGF0aW9uRXJyb3JzID0ge30pOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+XG4gICAgICBtZXJnZVZhbGlkYXRpb25FcnJvcnMoX1ZhbGlkYXRvcnMubWF4KG1heCkoY29udHJvbCksIHZhbGlkYXRpb25FcnJvcik7XG4gIH1cblxuICBzdGF0aWMgcmVxdWlyZWQodmFsaWRhdGlvbkVycm9yOiBGaWVsZFZhbGlkYXRpb25FcnJvcnMgPSB7fSk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT5cbiAgICAgIG1lcmdlVmFsaWRhdGlvbkVycm9ycyhfVmFsaWRhdG9ycy5yZXF1aXJlZChjb250cm9sKSwgdmFsaWRhdGlvbkVycm9yKTtcbiAgfVxuXG4gIHN0YXRpYyByZXF1aXJlZFRydWUodmFsaWRhdGlvbkVycm9yOiBGaWVsZFZhbGlkYXRpb25FcnJvcnMgPSB7fSk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT5cbiAgICAgIG1lcmdlVmFsaWRhdGlvbkVycm9ycyhfVmFsaWRhdG9ycy5yZXF1aXJlZFRydWUoY29udHJvbCksIHZhbGlkYXRpb25FcnJvcik7XG4gIH1cblxuICBzdGF0aWMgZW1haWwodmFsaWRhdGlvbkVycm9yOiBGaWVsZFZhbGlkYXRpb25FcnJvcnMgPSB7fSk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT5cbiAgICAgIG1lcmdlVmFsaWRhdGlvbkVycm9ycyhfVmFsaWRhdG9ycy5lbWFpbChjb250cm9sKSwgdmFsaWRhdGlvbkVycm9yKTtcbiAgfVxuXG4gIHN0YXRpYyBtaW5MZW5ndGgobWluTGVuZ3RoOiBudW1iZXIsIHZhbGlkYXRpb25FcnJvcjogRmllbGRWYWxpZGF0aW9uRXJyb3JzID0ge30pOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+XG4gICAgICBtZXJnZVZhbGlkYXRpb25FcnJvcnMoX1ZhbGlkYXRvcnMubWluTGVuZ3RoKG1pbkxlbmd0aCkoY29udHJvbCksIHZhbGlkYXRpb25FcnJvcik7XG4gIH1cblxuICBzdGF0aWMgbWF4TGVuZ3RoKG1heExlbmd0aDogbnVtYmVyLCB2YWxpZGF0aW9uRXJyb3I6IEZpZWxkVmFsaWRhdGlvbkVycm9ycyA9IHt9KTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PlxuICAgICAgbWVyZ2VWYWxpZGF0aW9uRXJyb3JzKF9WYWxpZGF0b3JzLm1heExlbmd0aChtYXhMZW5ndGgpKGNvbnRyb2wpLCB2YWxpZGF0aW9uRXJyb3IpO1xuICB9XG5cbiAgc3RhdGljIHBhdHRlcm4oXG4gICAgcGF0dGVybjogc3RyaW5nIHwgUmVnRXhwLFxuICAgIHZhbGlkYXRpb25FcnJvcjogRmllbGRWYWxpZGF0aW9uRXJyb3JzID0ge30sXG4gICk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT5cbiAgICAgIG1lcmdlVmFsaWRhdGlvbkVycm9ycyhfVmFsaWRhdG9ycy5wYXR0ZXJuKHBhdHRlcm4pKGNvbnRyb2wpLCB2YWxpZGF0aW9uRXJyb3IpO1xuICB9XG5cbiAgc3RhdGljIG51bGxWYWxpZGF0b3IoKTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PlxuICAgICAgbWVyZ2VWYWxpZGF0aW9uRXJyb3JzKF9WYWxpZGF0b3JzLm51bGxWYWxpZGF0b3IoY29udHJvbCksIHt9KTtcbiAgfVxuXG4gIHN0YXRpYyBudWxsQXN5bmNWYWxpZGF0b3IoKTogQXN5bmNWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIGNvbnRyb2wgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPG51bGw+KHJlc29sdmUgPT4ge1xuICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAvLyBudWxsIHZhbGlkYXRvcnMgZG9lcyBub3RoaW5nIVxuICAgICAgICAvLyBzbyBubyBjb250cm9sIGhhbmRsaW5nIG5lZWRlZCFcbiAgICAgICAgLy8gY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59XG4iXX0=