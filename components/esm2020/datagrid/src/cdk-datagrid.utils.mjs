import { itemPayloadDefault } from './cdk-datagrid-data.manager';
/**
 * setItemPayload sets an itemPayload on item in hidden-type-mode.
 * This means there is no direct access to itemPayload on returned item with TypeScript.
 * The advantage of this approach is that you can put implementation details
 * at type level in a hidden-type-mode so that it allows carry payload with an item.
 *
 * To get the itemPayload you should use getItemPayloadValue or getItemPayload.
 */
// prettier-ignore
export const setItemPayload = (item, itemPayload = {}) => {
    const _item = item;
    _item._$hiddenItemPayload = Object.assign({ ...itemPayloadDefault }, { ..._item?._$hiddenItemPayload ?? {} }, { ...itemPayload });
    return _item;
};
/**
 * getItemPayloadValue returns a specific itemPayloadValue of a item by given key.
 */
// prettier-ignore
export const getItemPayloadValue = (item, key) => {
    const _item = item;
    if (!_item?._$hiddenItemPayload) {
        console.log(_item);
        throw ErrorItemPayload(item);
    }
    return _item._$hiddenItemPayload[key];
};
/**
 * getItemPayload returns itemPayload which is in hidden-type-mode
 */
// prettier-ignore
export const getItemPayload = (item) => {
    const _item = item;
    if (!_item?._$hiddenItemPayload) {
        console.log(_item);
        throw ErrorItemPayload(item);
    }
    return _item._$hiddenItemPayload;
};
export const getItemData = (item) => {
    const _item = item;
    if (!_item?._$hiddenItemPayload)
        throw ErrorItemPayload(item);
    const hiddenItemPayload = _item._$hiddenItemPayload;
    delete _item._$hiddenItemPayload;
    const clonedData = structuredClone(_item);
    _item._$hiddenItemPayload = hiddenItemPayload;
    return clonedData;
};
/**
 * deleteItemPayload deletes the hidden item payload
 */
export const deleteItemPayload = (item) => {
    delete item?._$hiddenItemPayload;
    return item;
};
/**
 * hasItemPayload returns true if item has hidden item payload
 */
export const hasItemPayload = (item) => {
    const _item = item;
    return !!_item?._$hiddenItemPayload;
};
export const throwError = (message) => {
    throw new Error(message);
};
export const ErrorItemPayload = (item) => {
    return new Error(`HiddenItemPayload does not exists on "${JSON.stringify(item)}".` +
        'Please make sure it is set by using setItemPayload.');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWRhdGFncmlkLnV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL2RhdGFncmlkL3NyYy9jZGstZGF0YWdyaWQudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFrQyxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRWpHOzs7Ozs7O0dBT0c7QUFDSCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBRTVCLElBQVUsRUFBRSxjQUEwQyxFQUFFLEVBQVEsRUFBRTtJQUNsRSxNQUFNLEtBQUssR0FBRyxJQUFzQyxDQUFDO0lBRXJELEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUN2QyxFQUFFLEdBQUcsa0JBQWtCLEVBQXVCLEVBQzlDLEVBQUUsR0FBRyxLQUFLLEVBQUUsbUJBQW1CLElBQUksRUFBRSxFQUF1QixFQUM1RCxFQUFFLEdBQUcsV0FBVyxFQUF1QixDQUN4QyxDQUFDO0lBRUYsT0FBTyxLQUFhLENBQUE7QUFDdEIsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FJakMsSUFBVSxFQUFFLEdBQW9CLEVBQW9CLEVBQUU7SUFDdEQsTUFBTSxLQUFLLEdBQUcsSUFBc0MsQ0FBQztJQUNyRCxJQUFJLENBQUMsS0FBSyxFQUFFLG1CQUFtQixFQUFFO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsTUFBTSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QjtJQUVELE9BQU8sS0FBSyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBcUIsQ0FBQztBQUM1RCxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILGtCQUFrQjtBQUNsQixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FFNUIsSUFBVSxFQUErQixFQUFFO0lBQzNDLE1BQU0sS0FBSyxHQUFHLElBQXNDLENBQUM7SUFDckQsSUFBSSxDQUFDLEtBQUssRUFBRSxtQkFBbUIsRUFBRTtRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25CLE1BQU0sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUI7SUFFRCxPQUFPLEtBQUssQ0FBQyxtQkFBa0QsQ0FBQztBQUNsRSxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBTyxJQUFVLEVBQVUsRUFBRTtJQUN0RCxNQUFNLEtBQUssR0FBRyxJQUFzQyxDQUFDO0lBQ3JELElBQUksQ0FBQyxLQUFLLEVBQUUsbUJBQW1CO1FBQUUsTUFBTSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU5RCxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztJQUNwRCxPQUFRLEtBQStCLENBQUMsbUJBQW1CLENBQUM7SUFDNUQsTUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxpQkFBaUIsQ0FBQztJQUM5QyxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQU8sSUFBc0MsRUFBUSxFQUFFO0lBQ3RGLE9BQU8sSUFBSSxFQUFFLG1CQUFtQixDQUFDO0lBQ2pDLE9BQU8sSUFBWSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQU8sSUFBVSxFQUFFLEVBQUU7SUFDakQsTUFBTSxLQUFLLEdBQUcsSUFBc0MsQ0FBQztJQUNyRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsbUJBQW1CLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUU7SUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQWEsRUFBRSxFQUFFO0lBQ2hELE9BQU8sSUFBSSxLQUFLLENBQ2QseUNBQXlDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUk7UUFDL0QscURBQXFELENBQ3hELENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIaWRkZW5JdGVtUGF5bG9hZCwgSXRlbVBheWxvYWQsIGl0ZW1QYXlsb2FkRGVmYXVsdCB9IGZyb20gJy4vY2RrLWRhdGFncmlkLWRhdGEubWFuYWdlcic7XG5cbi8qKlxuICogc2V0SXRlbVBheWxvYWQgc2V0cyBhbiBpdGVtUGF5bG9hZCBvbiBpdGVtIGluIGhpZGRlbi10eXBlLW1vZGUuXG4gKiBUaGlzIG1lYW5zIHRoZXJlIGlzIG5vIGRpcmVjdCBhY2Nlc3MgdG8gaXRlbVBheWxvYWQgb24gcmV0dXJuZWQgaXRlbSB3aXRoIFR5cGVTY3JpcHQuXG4gKiBUaGUgYWR2YW50YWdlIG9mIHRoaXMgYXBwcm9hY2ggaXMgdGhhdCB5b3UgY2FuIHB1dCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzXG4gKiBhdCB0eXBlIGxldmVsIGluIGEgaGlkZGVuLXR5cGUtbW9kZSBzbyB0aGF0IGl0IGFsbG93cyBjYXJyeSBwYXlsb2FkIHdpdGggYW4gaXRlbS5cbiAqXG4gKiBUbyBnZXQgdGhlIGl0ZW1QYXlsb2FkIHlvdSBzaG91bGQgdXNlIGdldEl0ZW1QYXlsb2FkVmFsdWUgb3IgZ2V0SXRlbVBheWxvYWQuXG4gKi9cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IHNldEl0ZW1QYXlsb2FkID0gPFxuICBJdGVtLFxuPihpdGVtOiBJdGVtLCBpdGVtUGF5bG9hZDogUGFydGlhbDxJdGVtUGF5bG9hZDxJdGVtPj4gPSB7fSk6IEl0ZW0gPT4ge1xuICBjb25zdCBfaXRlbSA9IGl0ZW0gYXMgSXRlbSAmIEhpZGRlbkl0ZW1QYXlsb2FkPEl0ZW0+O1xuXG4gIF9pdGVtLl8kaGlkZGVuSXRlbVBheWxvYWQgPSBPYmplY3QuYXNzaWduKFxuICAgIHsgLi4uaXRlbVBheWxvYWREZWZhdWx0IH0gYXMgSXRlbVBheWxvYWQ8SXRlbT4sXG4gICAgeyAuLi5faXRlbT8uXyRoaWRkZW5JdGVtUGF5bG9hZCA/PyB7fSB9IGFzIEl0ZW1QYXlsb2FkPEl0ZW0+LFxuICAgIHsgLi4uaXRlbVBheWxvYWQgfSBhcyBJdGVtUGF5bG9hZDxJdGVtPixcbiAgKTtcblxuICByZXR1cm4gX2l0ZW0gYXMgSXRlbVxufTtcblxuLyoqXG4gKiBnZXRJdGVtUGF5bG9hZFZhbHVlIHJldHVybnMgYSBzcGVjaWZpYyBpdGVtUGF5bG9hZFZhbHVlIG9mIGEgaXRlbSBieSBnaXZlbiBrZXkuXG4gKi9cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IGdldEl0ZW1QYXlsb2FkVmFsdWUgPSA8XG4gIEl0ZW0sXG4gIEl0ZW1QYXlsb2FkS2V5cyBleHRlbmRzIGtleW9mIEl0ZW1QYXlsb2FkPEl0ZW0+LFxuICBJdGVtUGF5bG9hZFZhbHVlIGV4dGVuZHMgSXRlbVBheWxvYWQ8SXRlbT5bSXRlbVBheWxvYWRLZXlzXSxcbj4oaXRlbTogSXRlbSwga2V5OiBJdGVtUGF5bG9hZEtleXMpOiBJdGVtUGF5bG9hZFZhbHVlID0+IHtcbiAgY29uc3QgX2l0ZW0gPSBpdGVtIGFzIEl0ZW0gJiBIaWRkZW5JdGVtUGF5bG9hZDxJdGVtPjtcbiAgaWYgKCFfaXRlbT8uXyRoaWRkZW5JdGVtUGF5bG9hZCkge1xuICAgIGNvbnNvbGUubG9nKF9pdGVtKTtcbiAgICB0aHJvdyBFcnJvckl0ZW1QYXlsb2FkKGl0ZW0pO1xuICB9XG5cbiAgcmV0dXJuIF9pdGVtLl8kaGlkZGVuSXRlbVBheWxvYWRba2V5XSBhcyBJdGVtUGF5bG9hZFZhbHVlO1xufTtcblxuLyoqXG4gKiBnZXRJdGVtUGF5bG9hZCByZXR1cm5zIGl0ZW1QYXlsb2FkIHdoaWNoIGlzIGluIGhpZGRlbi10eXBlLW1vZGVcbiAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgZ2V0SXRlbVBheWxvYWQgPSA8XG4gIEl0ZW0sXG4+KGl0ZW06IEl0ZW0pOiBSZWFkb25seTxJdGVtUGF5bG9hZDxJdGVtPj4gPT4ge1xuICBjb25zdCBfaXRlbSA9IGl0ZW0gYXMgSXRlbSAmIEhpZGRlbkl0ZW1QYXlsb2FkPEl0ZW0+O1xuICBpZiAoIV9pdGVtPy5fJGhpZGRlbkl0ZW1QYXlsb2FkKSB7XG4gICAgY29uc29sZS5sb2coX2l0ZW0pO1xuICAgIHRocm93IEVycm9ySXRlbVBheWxvYWQoaXRlbSk7XG4gIH1cblxuICByZXR1cm4gX2l0ZW0uXyRoaWRkZW5JdGVtUGF5bG9hZCBhcyBSZWFkb25seTxJdGVtUGF5bG9hZDxJdGVtPj47XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SXRlbURhdGEgPSA8SXRlbT4oaXRlbTogSXRlbSk6IG9iamVjdCA9PiB7XG4gIGNvbnN0IF9pdGVtID0gaXRlbSBhcyBJdGVtICYgSGlkZGVuSXRlbVBheWxvYWQ8SXRlbT47XG4gIGlmICghX2l0ZW0/Ll8kaGlkZGVuSXRlbVBheWxvYWQpIHRocm93IEVycm9ySXRlbVBheWxvYWQoaXRlbSk7XG5cbiAgY29uc3QgaGlkZGVuSXRlbVBheWxvYWQgPSBfaXRlbS5fJGhpZGRlbkl0ZW1QYXlsb2FkO1xuICBkZWxldGUgKF9pdGVtIGFzIFBhcnRpYWw8dHlwZW9mIF9pdGVtPikuXyRoaWRkZW5JdGVtUGF5bG9hZDtcbiAgY29uc3QgY2xvbmVkRGF0YSA9IHN0cnVjdHVyZWRDbG9uZShfaXRlbSk7XG4gIF9pdGVtLl8kaGlkZGVuSXRlbVBheWxvYWQgPSBoaWRkZW5JdGVtUGF5bG9hZDtcbiAgcmV0dXJuIGNsb25lZERhdGE7XG59O1xuXG4vKipcbiAqIGRlbGV0ZUl0ZW1QYXlsb2FkIGRlbGV0ZXMgdGhlIGhpZGRlbiBpdGVtIHBheWxvYWRcbiAqL1xuZXhwb3J0IGNvbnN0IGRlbGV0ZUl0ZW1QYXlsb2FkID0gPEl0ZW0+KGl0ZW06IFBhcnRpYWw8SGlkZGVuSXRlbVBheWxvYWQ8SXRlbT4+KTogSXRlbSA9PiB7XG4gIGRlbGV0ZSBpdGVtPy5fJGhpZGRlbkl0ZW1QYXlsb2FkO1xuICByZXR1cm4gaXRlbSBhcyBJdGVtO1xufTtcblxuLyoqXG4gKiBoYXNJdGVtUGF5bG9hZCByZXR1cm5zIHRydWUgaWYgaXRlbSBoYXMgaGlkZGVuIGl0ZW0gcGF5bG9hZFxuICovXG5leHBvcnQgY29uc3QgaGFzSXRlbVBheWxvYWQgPSA8SXRlbT4oaXRlbTogSXRlbSkgPT4ge1xuICBjb25zdCBfaXRlbSA9IGl0ZW0gYXMgSXRlbSAmIEhpZGRlbkl0ZW1QYXlsb2FkPEl0ZW0+O1xuICByZXR1cm4gISFfaXRlbT8uXyRoaWRkZW5JdGVtUGF5bG9hZDtcbn07XG5cbmV4cG9ydCBjb25zdCB0aHJvd0Vycm9yID0gKG1lc3NhZ2U6IHN0cmluZykgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59O1xuXG5leHBvcnQgY29uc3QgRXJyb3JJdGVtUGF5bG9hZCA9IChpdGVtOiB1bmtub3duKSA9PiB7XG4gIHJldHVybiBuZXcgRXJyb3IoXG4gICAgYEhpZGRlbkl0ZW1QYXlsb2FkIGRvZXMgbm90IGV4aXN0cyBvbiBcIiR7SlNPTi5zdHJpbmdpZnkoaXRlbSl9XCIuYCArXG4gICAgICAnUGxlYXNlIG1ha2Ugc3VyZSBpdCBpcyBzZXQgYnkgdXNpbmcgc2V0SXRlbVBheWxvYWQuJyxcbiAgKTtcbn07XG4iXX0=