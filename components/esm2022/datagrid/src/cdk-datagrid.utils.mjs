import { itemPayloadDefault } from './cdk-datagrid-data.manager';
/**
 * experimental
 * @param itemDefault
 * @param itemPayloadDefault
 */
export const itemPayloadFactory = (itemDefault, itemPayloadDefault = {}) => (item, itemPayload = {}) => {
    return setItemPayload(
    // item // works!
    { ...itemDefault, ...item }, // does not work!
    Object.keys(itemPayloadDefault).length ? itemPayloadDefault : itemPayload);
};
/**
 * setItemPayload sets an itemPayload on item in hidden-type-mode.
 * This means there is no direct access to itemPayload on returned item with TypeScript.
 * The advantage of this approach is that you can put implementation details
 * at type level in a hidden-type-mode so that it allows carry payload with an item.
 *
 * To get the itemPayload you should use getItemPayloadValue or getItemPayload.
 */
// prettier-ignore
export const setItemPayload = (item, itemPayload = {}) => {
    const _item = item;
    _item._$hiddenItemPayload = Object.assign({ ...itemPayloadDefault }, { ..._item?._$hiddenItemPayload ?? {} }, { ...itemPayload });
    return _item;
};
/**
 * getItemPayloadValue returns a specific itemPayloadValue of an item by given key.
 */
// prettier-ignore
export const getItemPayloadValue = (item, key) => {
    const _item = item;
    if (!_item?._$hiddenItemPayload) {
        console.log(_item);
        throw ErrorItemPayload(item);
    }
    return _item._$hiddenItemPayload[key];
};
/**
 * getItemPayload returns itemPayload which is in hidden-type-mode
 */
// prettier-ignore
export const getItemPayload = (item) => {
    const _item = item;
    if (!_item?._$hiddenItemPayload) {
        console.log(_item);
        throw ErrorItemPayload(item);
    }
    return _item._$hiddenItemPayload;
};
export const getItemData = (item) => {
    const _item = item;
    if (!_item?._$hiddenItemPayload)
        throw ErrorItemPayload(item);
    const hiddenItemPayload = _item._$hiddenItemPayload;
    delete _item._$hiddenItemPayload;
    const clonedData = structuredClone(_item);
    _item._$hiddenItemPayload = hiddenItemPayload;
    return clonedData;
};
/**
 * deleteItemPayload deletes the hidden item payload
 */
export const deleteItemPayload = (item) => {
    delete item?._$hiddenItemPayload;
    return item;
};
/**
 * hasItemPayload returns true if item has hidden item payload
 */
export const hasItemPayload = (item) => {
    const _item = item;
    return !!_item?._$hiddenItemPayload;
};
export const throwError = (message) => {
    throw new Error(message);
};
export const ErrorItemPayload = (item) => {
    return new Error(`HiddenItemPayload does not exists on "${JSON.stringify(item)}".` +
        'Please make sure it is set by using setItemPayload.');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWRhdGFncmlkLnV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL2RhdGFncmlkL3NyYy9jZGstZGF0YWdyaWQudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFrQyxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRWpHOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FDN0IsQ0FBTyxXQUFpQixFQUFFLHFCQUFpRCxFQUFFLEVBQUUsRUFBRSxDQUNqRixDQUFDLElBQVUsRUFBRSxjQUEwQyxFQUFFLEVBQUUsRUFBRTtJQUMzRCxPQUFPLGNBQWM7SUFDbkIsaUJBQWlCO0lBQ2pCLEVBQUUsR0FBRyxXQUFXLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxpQkFBaUI7SUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FDMUUsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVKOzs7Ozs7O0dBT0c7QUFDSCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBRTVCLElBQVUsRUFBRSxjQUEwQyxFQUFFLEVBQVEsRUFBRTtJQUNsRSxNQUFNLEtBQUssR0FBRyxJQUFzQyxDQUFDO0lBRXJELEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUN2QyxFQUFFLEdBQUcsa0JBQWtCLEVBQXVCLEVBQzlDLEVBQUUsR0FBRyxLQUFLLEVBQUUsbUJBQW1CLElBQUksRUFBRSxFQUF1QixFQUM1RCxFQUFFLEdBQUcsV0FBVyxFQUF1QixDQUN4QyxDQUFDO0lBRUYsT0FBTyxLQUFhLENBQUE7QUFDdEIsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FJakMsSUFBVSxFQUFFLEdBQW9CLEVBQW9CLEVBQUU7SUFDdEQsTUFBTSxLQUFLLEdBQUcsSUFBc0MsQ0FBQztJQUNyRCxJQUFJLENBQUMsS0FBSyxFQUFFLG1CQUFtQixFQUFFO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsTUFBTSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QjtJQUVELE9BQU8sS0FBSyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBcUIsQ0FBQztBQUM1RCxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILGtCQUFrQjtBQUNsQixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FFNUIsSUFBVSxFQUErQixFQUFFO0lBQzNDLE1BQU0sS0FBSyxHQUFHLElBQXNDLENBQUM7SUFDckQsSUFBSSxDQUFDLEtBQUssRUFBRSxtQkFBbUIsRUFBRTtRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25CLE1BQU0sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUI7SUFFRCxPQUFPLEtBQUssQ0FBQyxtQkFBa0QsQ0FBQztBQUNsRSxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBTyxJQUFVLEVBQVUsRUFBRTtJQUN0RCxNQUFNLEtBQUssR0FBRyxJQUFzQyxDQUFDO0lBQ3JELElBQUksQ0FBQyxLQUFLLEVBQUUsbUJBQW1CO1FBQUUsTUFBTSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU5RCxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztJQUNwRCxPQUFRLEtBQStCLENBQUMsbUJBQW1CLENBQUM7SUFDNUQsTUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxpQkFBaUIsQ0FBQztJQUM5QyxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQU8sSUFBc0MsRUFBUSxFQUFFO0lBQ3RGLE9BQU8sSUFBSSxFQUFFLG1CQUFtQixDQUFDO0lBQ2pDLE9BQU8sSUFBWSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQU8sSUFBVSxFQUFFLEVBQUU7SUFDakQsTUFBTSxLQUFLLEdBQUcsSUFBc0MsQ0FBQztJQUNyRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsbUJBQW1CLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUU7SUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQWEsRUFBRSxFQUFFO0lBQ2hELE9BQU8sSUFBSSxLQUFLLENBQ2QseUNBQXlDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUk7UUFDL0QscURBQXFELENBQ3hELENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIaWRkZW5JdGVtUGF5bG9hZCwgSXRlbVBheWxvYWQsIGl0ZW1QYXlsb2FkRGVmYXVsdCB9IGZyb20gJy4vY2RrLWRhdGFncmlkLWRhdGEubWFuYWdlcic7XG5cbi8qKlxuICogZXhwZXJpbWVudGFsXG4gKiBAcGFyYW0gaXRlbURlZmF1bHRcbiAqIEBwYXJhbSBpdGVtUGF5bG9hZERlZmF1bHRcbiAqL1xuZXhwb3J0IGNvbnN0IGl0ZW1QYXlsb2FkRmFjdG9yeSA9XG4gIDxJdGVtPihpdGVtRGVmYXVsdDogSXRlbSwgaXRlbVBheWxvYWREZWZhdWx0OiBQYXJ0aWFsPEl0ZW1QYXlsb2FkPEl0ZW0+PiA9IHt9KSA9PlxuICAoaXRlbTogSXRlbSwgaXRlbVBheWxvYWQ6IFBhcnRpYWw8SXRlbVBheWxvYWQ8SXRlbT4+ID0ge30pID0+IHtcbiAgICByZXR1cm4gc2V0SXRlbVBheWxvYWQ8SXRlbT4oXG4gICAgICAvLyBpdGVtIC8vIHdvcmtzIVxuICAgICAgeyAuLi5pdGVtRGVmYXVsdCwgLi4uaXRlbSB9LCAvLyBkb2VzIG5vdCB3b3JrIVxuICAgICAgT2JqZWN0LmtleXMoaXRlbVBheWxvYWREZWZhdWx0KS5sZW5ndGggPyBpdGVtUGF5bG9hZERlZmF1bHQgOiBpdGVtUGF5bG9hZCxcbiAgICApO1xuICB9O1xuXG4vKipcbiAqIHNldEl0ZW1QYXlsb2FkIHNldHMgYW4gaXRlbVBheWxvYWQgb24gaXRlbSBpbiBoaWRkZW4tdHlwZS1tb2RlLlxuICogVGhpcyBtZWFucyB0aGVyZSBpcyBubyBkaXJlY3QgYWNjZXNzIHRvIGl0ZW1QYXlsb2FkIG9uIHJldHVybmVkIGl0ZW0gd2l0aCBUeXBlU2NyaXB0LlxuICogVGhlIGFkdmFudGFnZSBvZiB0aGlzIGFwcHJvYWNoIGlzIHRoYXQgeW91IGNhbiBwdXQgaW1wbGVtZW50YXRpb24gZGV0YWlsc1xuICogYXQgdHlwZSBsZXZlbCBpbiBhIGhpZGRlbi10eXBlLW1vZGUgc28gdGhhdCBpdCBhbGxvd3MgY2FycnkgcGF5bG9hZCB3aXRoIGFuIGl0ZW0uXG4gKlxuICogVG8gZ2V0IHRoZSBpdGVtUGF5bG9hZCB5b3Ugc2hvdWxkIHVzZSBnZXRJdGVtUGF5bG9hZFZhbHVlIG9yIGdldEl0ZW1QYXlsb2FkLlxuICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBzZXRJdGVtUGF5bG9hZCA9IDxcbiAgSXRlbSxcbj4oaXRlbTogSXRlbSwgaXRlbVBheWxvYWQ6IFBhcnRpYWw8SXRlbVBheWxvYWQ8SXRlbT4+ID0ge30pOiBJdGVtID0+IHtcbiAgY29uc3QgX2l0ZW0gPSBpdGVtIGFzIEl0ZW0gJiBIaWRkZW5JdGVtUGF5bG9hZDxJdGVtPjtcblxuICBfaXRlbS5fJGhpZGRlbkl0ZW1QYXlsb2FkID0gT2JqZWN0LmFzc2lnbihcbiAgICB7IC4uLml0ZW1QYXlsb2FkRGVmYXVsdCB9IGFzIEl0ZW1QYXlsb2FkPEl0ZW0+LFxuICAgIHsgLi4uX2l0ZW0/Ll8kaGlkZGVuSXRlbVBheWxvYWQgPz8ge30gfSBhcyBJdGVtUGF5bG9hZDxJdGVtPixcbiAgICB7IC4uLml0ZW1QYXlsb2FkIH0gYXMgSXRlbVBheWxvYWQ8SXRlbT4sXG4gICk7XG5cbiAgcmV0dXJuIF9pdGVtIGFzIEl0ZW1cbn07XG5cbi8qKlxuICogZ2V0SXRlbVBheWxvYWRWYWx1ZSByZXR1cm5zIGEgc3BlY2lmaWMgaXRlbVBheWxvYWRWYWx1ZSBvZiBhbiBpdGVtIGJ5IGdpdmVuIGtleS5cbiAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgZ2V0SXRlbVBheWxvYWRWYWx1ZSA9IDxcbiAgSXRlbSxcbiAgSXRlbVBheWxvYWRLZXlzIGV4dGVuZHMga2V5b2YgSXRlbVBheWxvYWQ8SXRlbT4sXG4gIEl0ZW1QYXlsb2FkVmFsdWUgZXh0ZW5kcyBJdGVtUGF5bG9hZDxJdGVtPltJdGVtUGF5bG9hZEtleXNdLFxuPihpdGVtOiBJdGVtLCBrZXk6IEl0ZW1QYXlsb2FkS2V5cyk6IEl0ZW1QYXlsb2FkVmFsdWUgPT4ge1xuICBjb25zdCBfaXRlbSA9IGl0ZW0gYXMgSXRlbSAmIEhpZGRlbkl0ZW1QYXlsb2FkPEl0ZW0+O1xuICBpZiAoIV9pdGVtPy5fJGhpZGRlbkl0ZW1QYXlsb2FkKSB7XG4gICAgY29uc29sZS5sb2coX2l0ZW0pO1xuICAgIHRocm93IEVycm9ySXRlbVBheWxvYWQoaXRlbSk7XG4gIH1cblxuICByZXR1cm4gX2l0ZW0uXyRoaWRkZW5JdGVtUGF5bG9hZFtrZXldIGFzIEl0ZW1QYXlsb2FkVmFsdWU7XG59O1xuXG4vKipcbiAqIGdldEl0ZW1QYXlsb2FkIHJldHVybnMgaXRlbVBheWxvYWQgd2hpY2ggaXMgaW4gaGlkZGVuLXR5cGUtbW9kZVxuICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBnZXRJdGVtUGF5bG9hZCA9IDxcbiAgSXRlbSxcbj4oaXRlbTogSXRlbSk6IFJlYWRvbmx5PEl0ZW1QYXlsb2FkPEl0ZW0+PiA9PiB7XG4gIGNvbnN0IF9pdGVtID0gaXRlbSBhcyBJdGVtICYgSGlkZGVuSXRlbVBheWxvYWQ8SXRlbT47XG4gIGlmICghX2l0ZW0/Ll8kaGlkZGVuSXRlbVBheWxvYWQpIHtcbiAgICBjb25zb2xlLmxvZyhfaXRlbSk7XG4gICAgdGhyb3cgRXJyb3JJdGVtUGF5bG9hZChpdGVtKTtcbiAgfVxuXG4gIHJldHVybiBfaXRlbS5fJGhpZGRlbkl0ZW1QYXlsb2FkIGFzIFJlYWRvbmx5PEl0ZW1QYXlsb2FkPEl0ZW0+Pjtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRJdGVtRGF0YSA9IDxJdGVtPihpdGVtOiBJdGVtKTogb2JqZWN0ID0+IHtcbiAgY29uc3QgX2l0ZW0gPSBpdGVtIGFzIEl0ZW0gJiBIaWRkZW5JdGVtUGF5bG9hZDxJdGVtPjtcbiAgaWYgKCFfaXRlbT8uXyRoaWRkZW5JdGVtUGF5bG9hZCkgdGhyb3cgRXJyb3JJdGVtUGF5bG9hZChpdGVtKTtcblxuICBjb25zdCBoaWRkZW5JdGVtUGF5bG9hZCA9IF9pdGVtLl8kaGlkZGVuSXRlbVBheWxvYWQ7XG4gIGRlbGV0ZSAoX2l0ZW0gYXMgUGFydGlhbDx0eXBlb2YgX2l0ZW0+KS5fJGhpZGRlbkl0ZW1QYXlsb2FkO1xuICBjb25zdCBjbG9uZWREYXRhID0gc3RydWN0dXJlZENsb25lKF9pdGVtKTtcbiAgX2l0ZW0uXyRoaWRkZW5JdGVtUGF5bG9hZCA9IGhpZGRlbkl0ZW1QYXlsb2FkO1xuICByZXR1cm4gY2xvbmVkRGF0YTtcbn07XG5cbi8qKlxuICogZGVsZXRlSXRlbVBheWxvYWQgZGVsZXRlcyB0aGUgaGlkZGVuIGl0ZW0gcGF5bG9hZFxuICovXG5leHBvcnQgY29uc3QgZGVsZXRlSXRlbVBheWxvYWQgPSA8SXRlbT4oaXRlbTogUGFydGlhbDxIaWRkZW5JdGVtUGF5bG9hZDxJdGVtPj4pOiBJdGVtID0+IHtcbiAgZGVsZXRlIGl0ZW0/Ll8kaGlkZGVuSXRlbVBheWxvYWQ7XG4gIHJldHVybiBpdGVtIGFzIEl0ZW07XG59O1xuXG4vKipcbiAqIGhhc0l0ZW1QYXlsb2FkIHJldHVybnMgdHJ1ZSBpZiBpdGVtIGhhcyBoaWRkZW4gaXRlbSBwYXlsb2FkXG4gKi9cbmV4cG9ydCBjb25zdCBoYXNJdGVtUGF5bG9hZCA9IDxJdGVtPihpdGVtOiBJdGVtKSA9PiB7XG4gIGNvbnN0IF9pdGVtID0gaXRlbSBhcyBJdGVtICYgSGlkZGVuSXRlbVBheWxvYWQ8SXRlbT47XG4gIHJldHVybiAhIV9pdGVtPy5fJGhpZGRlbkl0ZW1QYXlsb2FkO1xufTtcblxuZXhwb3J0IGNvbnN0IHRocm93RXJyb3IgPSAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBFcnJvckl0ZW1QYXlsb2FkID0gKGl0ZW06IHVua25vd24pID0+IHtcbiAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICBgSGlkZGVuSXRlbVBheWxvYWQgZG9lcyBub3QgZXhpc3RzIG9uIFwiJHtKU09OLnN0cmluZ2lmeShpdGVtKX1cIi5gICtcbiAgICAgICdQbGVhc2UgbWFrZSBzdXJlIGl0IGlzIHNldCBieSB1c2luZyBzZXRJdGVtUGF5bG9hZC4nLFxuICApO1xufTtcbiJdfQ==