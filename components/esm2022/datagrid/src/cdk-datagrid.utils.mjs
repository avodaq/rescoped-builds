import { itemPayloadDefault } from './cdk-datagrid-data.manager';
/**
 * experimental
 * @param itemDefault
 * @param itemPayloadDefault
 */
export const itemPayloadFactory = (itemDefault, itemPayloadDefault = {}) => (item, itemPayload = {}) => {
    return setItemPayload(
    // item // works!
    { ...itemDefault, ...item }, // does not work!
    Object.keys(itemPayloadDefault).length ? itemPayloadDefault : itemPayload);
};
/**
 * setItemPayload sets an itemPayload on item in hidden-type-mode.
 * This means there is no direct access to itemPayload on returned item with TypeScript.
 * The advantage of this approach is that you can put implementation details
 * at type level in a hidden-type-mode so that it allows carry payload with an item.
 *
 * To get the itemPayload you should use getItemPayloadValue or getItemPayload.
 */
// prettier-ignore
export const setItemPayload = (item, itemPayload = {}) => {
    const _item = item;
    _item._$hiddenItemPayload = Object.assign({ ...itemPayloadDefault }, { ..._item?._$hiddenItemPayload ?? {} }, { ...itemPayload });
    return _item;
};
/**
 * getItemPayloadValue returns a specific itemPayloadValue of an item by given key.
 */
// prettier-ignore
export const getItemPayloadValue = (item, key) => {
    const _item = item;
    if (!_item?._$hiddenItemPayload) {
        console.log(_item);
        throw ErrorItemPayload(item);
    }
    return _item._$hiddenItemPayload[key];
};
/**
 * getItemPayload returns itemPayload which is in hidden-type-mode
 */
// prettier-ignore
export const getItemPayload = (item) => {
    const _item = item;
    if (!_item?._$hiddenItemPayload) {
        console.log(_item);
        throw ErrorItemPayload(item);
    }
    return _item._$hiddenItemPayload;
};
export const getItemData = (item) => {
    const _item = item;
    if (!_item?._$hiddenItemPayload)
        throw ErrorItemPayload(item);
    const hiddenItemPayload = _item._$hiddenItemPayload;
    delete _item._$hiddenItemPayload;
    const clonedData = structuredClone(_item);
    _item._$hiddenItemPayload = hiddenItemPayload;
    return clonedData;
};
/**
 * deleteItemPayload deletes the hidden item payload
 */
export const deleteItemPayload = (item) => {
    delete item?._$hiddenItemPayload;
    return item;
};
/**
 * hasItemPayload returns true if item has hidden item payload
 */
export const hasItemPayload = (item) => {
    const _item = item;
    return !!_item?._$hiddenItemPayload;
};
export const throwError = (message) => {
    throw new Error(message);
};
export const ErrorItemPayload = (item) => {
    return new Error(`HiddenItemPayload does not exists on "${JSON.stringify(item)}".` +
        'Please make sure it is set by using setItemPayload.');
};
//# sourceMappingURL=data:application/json;base64,