import { Injectable } from '@angular/core';
import { getItemPayload, setItemPayload } from './cdk-datagrid.utils';
import { Subject } from 'rxjs';
import { startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
export const itemPayloadDefault = {
    id: '',
    index: 0,
    active: true,
    groupId: null,
    parent: false,
    collapsed: false,
    selected: false,
    filtered: false,
    actionType: 'row-single',
    rules: null,
};
export var ItemActionIndex;
(function (ItemActionIndex) {
    ItemActionIndex[ItemActionIndex["rowGlobal"] = -99] = "rowGlobal";
    ItemActionIndex[ItemActionIndex["rowGroup"] = -98] = "rowGroup";
    ItemActionIndex[ItemActionIndex["rowSingle"] = -97] = "rowSingle";
    ItemActionIndex[ItemActionIndex["rowSearchReplace"] = -96] = "rowSearchReplace";
})(ItemActionIndex || (ItemActionIndex = {}));
class CdkDatagridDataManager {
    constructor() {
        this.#valueChange$ = new Subject();
        this.valueChange$ = this.#valueChange$.pipe(startWith(null));
        this.#dataTableSlot = new Map();
        this.countSingleItems = 0;
        this.countGroupItems = 0;
        this.#originalData = [];
    }
    #valueChange$;
    #dataTableSlot;
    #dataSource;
    #originalData;
    set dataSource(dataSource) {
        this.#dataSource = dataSource;
        this.#originalData = dataSource.data.map((item, index) => this.#countActionType(setItemPayload(item, { index })));
    }
    get data() {
        return this.#originalData;
    }
    setValueChange(value) {
        this.#valueChange$.next(value);
    }
    splice(start, deleteCount = 0, items) {
        this.#originalData.splice(start, deleteCount, ...items);
        this.#originalData = this.cloneItemAll();
        this.#dataSource.data = this.#originalData;
    }
    delete(item, includeChildren = false) {
        const payload = getItemPayload(item);
        const _index = payload.index;
        const groupId = payload.groupId;
        const parent = payload.parent;
        this.#originalData = this.#originalData.filter(item => {
            return ((!parent && getItemPayload(item).index !== _index) ||
                (includeChildren && parent && getItemPayload(item).groupId !== groupId));
        });
        this.#originalData = this.cloneItemAll();
        this.#dataSource.data = this.#originalData;
    }
    /**
     * This method is useful when you want to add dynamic a runtime an item to the table.
     */
    addDataSlotItem(itemPayload, item) {
        const { id, actionType, active } = itemPayload;
        if (!id)
            throw new Error('id is required');
        if (!actionType)
            throw new Error('actionType is required');
        let _item = this.getDataTableItem(id);
        if (!_item) {
            _item = setItemPayload(_item ?? (item || {}), itemPayload);
            this.#dataTableSlot.set(id, _item);
        }
        else {
            _item = setItemPayload(_item, { active });
        }
        if (active) {
            this.#originalData.splice(0, 0, _item);
        }
        else if (!active) {
            const index = this.#dataSource.data.indexOf(_item);
            this.#originalData.splice(index, 1);
        }
        this.#dataSource.data = this.#originalData.filter(item => !getItemPayload(item).collapsed || getItemPayload(item).parent);
    }
    getDataTableItem(id) {
        return this.#dataTableSlot.get(id);
    }
    getChildItems(item) {
        const { groupId } = getItemPayload(item);
        return this.#originalData.filter(item => {
            const payload = getItemPayload(item);
            return (payload.groupId === groupId &&
                payload.parent === false &&
                payload.actionType === 'row-single');
        });
    }
    getSingleItems() {
        return this.#originalData.filter(item => {
            const { actionType } = getItemPayload(item);
            return actionType === 'row-single';
        });
    }
    getParentItem(item) {
        const { groupId } = getItemPayload(item);
        return this.#originalData.find(item => {
            const payload = getItemPayload(item);
            return payload.groupId === groupId && payload.parent === true;
        });
    }
    getGroupChildren(groupId) {
        return this.#originalData.filter(item => {
            const { groupId: _groupId, parent, actionType } = getItemPayload(item);
            return _groupId === groupId && !parent && actionType === 'row-single';
        });
    }
    setValue(key, value, item, affectedItemsFn) {
        const { actionType, groupId } = getItemPayload(item);
        if (actionType === 'row-single') {
            this.setSingleValue(item, key, value, affectedItemsFn);
        }
        else if (actionType === 'row-group' && typeof groupId === 'number' && groupId >= 0) {
            this.setGroupValues(key, value, groupId, affectedItemsFn);
        }
        else if (actionType === 'row-global') {
            this.setGlobalValues(key, value, affectedItemsFn);
        }
        else {
            throw new Error(`Unknown actionType: "${actionType}" or groupId: "${groupId}"`);
        }
        const valueChange = { key, value, actionType, groupId };
        this.#valueChange$.next(valueChange);
    }
    setItemByKeyValue(item, key, value) {
        if (!Object.getOwnPropertyDescriptor(item, key)) {
            throw new Error(`Invalid key: ${key.toString()} or no default item object is provided`);
        }
        item[key] = value;
    }
    setSingleValue(item, key, value, affectedItems) {
        this.setItemByKeyValue(item, key, value);
        affectedItems?.(getItemPayload(item));
    }
    setGroupValues(key, value, groupId, affectedItems) {
        this.#originalData.forEach(item => {
            const itemPayload = getItemPayload(item);
            if (itemPayload.groupId === groupId) {
                this.setItemByKeyValue(item, key, value);
                affectedItems?.(itemPayload);
            }
        });
    }
    setGlobalValues(key, value, affectedItems) {
        this.#originalData.forEach(Item => {
            const itemPayload = getItemPayload(Item);
            this.setItemByKeyValue(Item, key, value);
            affectedItems?.(itemPayload);
        });
    }
    toggleGroup(itemPayload) {
        this.#dataSource.data = this.#originalData.filter(item => {
            const _item = getItemPayload(item);
            if (itemPayload.groupId === _item.groupId) {
                item = setItemPayload(item, { collapsed: !_item.collapsed });
            }
            return !getItemPayload(item).collapsed || getItemPayload(item).parent;
        });
    }
    getItemByIndex(index) {
        const item = this.#originalData[index];
        if (!item) {
            throw new Error(`
        Item with index "${index}" not found.
        Hint: update the index value if you have added or removed items!
      `);
        }
        return this.#originalData[index];
    }
    getParentItemByGroupId(groupId) {
        const item = this.#originalData.find(item => {
            const _item = getItemPayload(item);
            return _item.groupId === groupId && _item.parent;
        });
        if (!item) {
            throw new Error(`Item with groupId "${groupId}" not found`);
        }
        return item;
    }
    cloneItemAll(itemPayload = {}) {
        return this.#originalData.map((item, index) => this.cloneItem(item, { ...itemPayload, index }));
    }
    cloneItem(item, itemPayload = {}) {
        const overrides = getItemPayload(item)?.rules?.overrides;
        const keyMaps = new Map();
        if (typeof overrides === 'object') {
            const overridesKeys = Object.keys(overrides);
            overridesKeys.forEach(key => {
                const action = getItemPayload(item)?.rules?.overrides?.[key]?.action;
                // action.componentType
                const component = action?.componentType;
                if (component) {
                    keyMaps.set(key, { ...keyMaps.get(key), component });
                    action.componentType = undefined;
                }
                // action.cond
                const cond = action?.cond;
                if (cond) {
                    keyMaps.set(key, { ...keyMaps.get(key), cond });
                    action.cond = undefined;
                }
                // action.transform
                const transform = action?.transform;
                if (transform) {
                    keyMaps.set(key, { ...keyMaps.get(key), transform });
                    action.transform = undefined;
                }
            });
        }
        item = structuredClone(item);
        keyMaps.forEach((componentType, key) => {
            const action = getItemPayload(item)?.rules?.overrides?.[key]?.action;
            if (action && componentType.component) {
                action.componentType = componentType.component;
            }
            if (action && componentType.cond) {
                action.cond = componentType.cond;
            }
            if (action && componentType.transform) {
                action.transform = componentType.transform;
            }
        });
        return setItemPayload(item, itemPayload);
    }
    #countActionType(item) {
        const actionType = getItemPayload(item).actionType;
        actionType === 'row-single' ? this.countSingleItems++ : null;
        actionType === 'row-group' ? this.countGroupItems++ : null;
        return item;
    }
    destroy() {
        this.#dataSource.data = [];
        this.#originalData = [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: CdkDatagridDataManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: CdkDatagridDataManager }); }
}
export { CdkDatagridDataManager };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.6", ngImport: i0, type: CdkDatagridDataManager, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,