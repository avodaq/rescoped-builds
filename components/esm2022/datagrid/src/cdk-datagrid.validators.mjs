import { Validators as _Validators, } from '@angular/forms';
export const defaultValidationError = {
    validationMessage: 'unknown error',
    validationCode: 'DEFAULT_UNKNOWN_ERROR',
};
export const mergeValidationErrors = (validationError1, validationError2 = defaultValidationError) => {
    return validationError1 ? { ...validationError1, ...validationError2 } : validationError1;
};
export class Validators {
    static min(min, validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.min(min)(control), validationError);
    }
    static max(max, validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.max(max)(control), validationError);
    }
    static required(validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.required(control), validationError);
    }
    static requiredTrue(validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.requiredTrue(control), validationError);
    }
    static email(validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.email(control), validationError);
    }
    static minLength(minLength, validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.minLength(minLength)(control), validationError);
    }
    static maxLength(maxLength, validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.maxLength(maxLength)(control), validationError);
    }
    static pattern(pattern, validationError = {}) {
        return (control) => mergeValidationErrors(_Validators.pattern(pattern)(control), validationError);
    }
    static nullValidator() {
        return (control) => mergeValidationErrors(_Validators.nullValidator(control), {});
    }
    static nullAsyncValidator() {
        return _control => {
            return new Promise(resolve => {
                resolve(null);
                // null validators does nothing!
                // so no control handling needed!
                // control.updateValueAndValidity();
            });
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWRhdGFncmlkLnZhbGlkYXRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvZGF0YWdyaWQvc3JjL2Nkay1kYXRhZ3JpZC52YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFLTCxVQUFVLElBQUksV0FBVyxHQUMxQixNQUFNLGdCQUFnQixDQUFDO0FBUXhCLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUEwQjtJQUMzRCxpQkFBaUIsRUFBRSxlQUFlO0lBQ2xDLGNBQWMsRUFBRSx1QkFBdUI7Q0FDeEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQ25DLGdCQUF5QyxFQUN6QyxtQkFBMEMsc0JBQXNCLEVBQ2xDLEVBQUU7SUFDaEMsT0FBTyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLGdCQUFnQixFQUFFLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7QUFDNUYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxPQUFPLFVBQVU7SUFDckIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFXLEVBQUUsa0JBQXlDLEVBQUU7UUFDakUsT0FBTyxDQUFDLE9BQXdCLEVBQUUsRUFBRSxDQUNsQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQVcsRUFBRSxrQkFBeUMsRUFBRTtRQUNqRSxPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFLENBQ2xDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQXlDLEVBQUU7UUFDekQsT0FBTyxDQUFDLE9BQXdCLEVBQUUsRUFBRSxDQUNsQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLGtCQUF5QyxFQUFFO1FBQzdELE9BQU8sQ0FBQyxPQUF3QixFQUFFLEVBQUUsQ0FDbEMscUJBQXFCLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQkFBeUMsRUFBRTtRQUN0RCxPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFLENBQ2xDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBaUIsRUFBRSxrQkFBeUMsRUFBRTtRQUM3RSxPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFLENBQ2xDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBaUIsRUFBRSxrQkFBeUMsRUFBRTtRQUM3RSxPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFLENBQ2xDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQ1osT0FBd0IsRUFDeEIsa0JBQXlDLEVBQUU7UUFFM0MsT0FBTyxDQUFDLE9BQXdCLEVBQUUsRUFBRSxDQUNsQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRCxNQUFNLENBQUMsYUFBYTtRQUNsQixPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFLENBQ2xDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxrQkFBa0I7UUFDdkIsT0FBTyxRQUFRLENBQUMsRUFBRTtZQUNoQixPQUFPLElBQUksT0FBTyxDQUFPLE9BQU8sQ0FBQyxFQUFFO2dCQUNqQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2QsZ0NBQWdDO2dCQUNoQyxpQ0FBaUM7Z0JBQ2pDLG9DQUFvQztZQUN0QyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFic3RyYWN0Q29udHJvbCxcbiAgQXN5bmNWYWxpZGF0b3JGbixcbiAgVmFsaWRhdGlvbkVycm9ycyxcbiAgVmFsaWRhdG9yRm4sXG4gIFZhbGlkYXRvcnMgYXMgX1ZhbGlkYXRvcnMsXG59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZFZhbGlkYXRpb25FcnJvcnMge1xuICB2YWxpZGF0aW9uTWVzc2FnZT86IHN0cmluZztcbiAgdmFsaWRhdGlvbkNvZGU/OiBzdHJpbmc7XG4gIHZhbGlkYXRpb25UeXBlPzogJ2Vycm9yJyB8ICd3YXJuaW5nJztcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRWYWxpZGF0aW9uRXJyb3I6IEZpZWxkVmFsaWRhdGlvbkVycm9ycyA9IHtcbiAgdmFsaWRhdGlvbk1lc3NhZ2U6ICd1bmtub3duIGVycm9yJyxcbiAgdmFsaWRhdGlvbkNvZGU6ICdERUZBVUxUX1VOS05PV05fRVJST1InLFxufTtcblxuZXhwb3J0IGNvbnN0IG1lcmdlVmFsaWRhdGlvbkVycm9ycyA9IChcbiAgdmFsaWRhdGlvbkVycm9yMTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwsXG4gIHZhbGlkYXRpb25FcnJvcjI6IEZpZWxkVmFsaWRhdGlvbkVycm9ycyA9IGRlZmF1bHRWYWxpZGF0aW9uRXJyb3IsXG4pOiBGaWVsZFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgcmV0dXJuIHZhbGlkYXRpb25FcnJvcjEgPyB7IC4uLnZhbGlkYXRpb25FcnJvcjEsIC4uLnZhbGlkYXRpb25FcnJvcjIgfSA6IHZhbGlkYXRpb25FcnJvcjE7XG59O1xuXG5leHBvcnQgY2xhc3MgVmFsaWRhdG9ycyB7XG4gIHN0YXRpYyBtaW4obWluOiBudW1iZXIsIHZhbGlkYXRpb25FcnJvcjogRmllbGRWYWxpZGF0aW9uRXJyb3JzID0ge30pOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+XG4gICAgICBtZXJnZVZhbGlkYXRpb25FcnJvcnMoX1ZhbGlkYXRvcnMubWluKG1pbikoY29udHJvbCksIHZhbGlkYXRpb25FcnJvcik7XG4gIH1cblxuICBzdGF0aWMgbWF4KG1heDogbnVtYmVyLCB2YWxpZGF0aW9uRXJyb3I6IEZpZWxkVmFsaWRhdGlvbkVycm9ycyA9IHt9KTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PlxuICAgICAgbWVyZ2VWYWxpZGF0aW9uRXJyb3JzKF9WYWxpZGF0b3JzLm1heChtYXgpKGNvbnRyb2wpLCB2YWxpZGF0aW9uRXJyb3IpO1xuICB9XG5cbiAgc3RhdGljIHJlcXVpcmVkKHZhbGlkYXRpb25FcnJvcjogRmllbGRWYWxpZGF0aW9uRXJyb3JzID0ge30pOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+XG4gICAgICBtZXJnZVZhbGlkYXRpb25FcnJvcnMoX1ZhbGlkYXRvcnMucmVxdWlyZWQoY29udHJvbCksIHZhbGlkYXRpb25FcnJvcik7XG4gIH1cblxuICBzdGF0aWMgcmVxdWlyZWRUcnVlKHZhbGlkYXRpb25FcnJvcjogRmllbGRWYWxpZGF0aW9uRXJyb3JzID0ge30pOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+XG4gICAgICBtZXJnZVZhbGlkYXRpb25FcnJvcnMoX1ZhbGlkYXRvcnMucmVxdWlyZWRUcnVlKGNvbnRyb2wpLCB2YWxpZGF0aW9uRXJyb3IpO1xuICB9XG5cbiAgc3RhdGljIGVtYWlsKHZhbGlkYXRpb25FcnJvcjogRmllbGRWYWxpZGF0aW9uRXJyb3JzID0ge30pOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+XG4gICAgICBtZXJnZVZhbGlkYXRpb25FcnJvcnMoX1ZhbGlkYXRvcnMuZW1haWwoY29udHJvbCksIHZhbGlkYXRpb25FcnJvcik7XG4gIH1cblxuICBzdGF0aWMgbWluTGVuZ3RoKG1pbkxlbmd0aDogbnVtYmVyLCB2YWxpZGF0aW9uRXJyb3I6IEZpZWxkVmFsaWRhdGlvbkVycm9ycyA9IHt9KTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PlxuICAgICAgbWVyZ2VWYWxpZGF0aW9uRXJyb3JzKF9WYWxpZGF0b3JzLm1pbkxlbmd0aChtaW5MZW5ndGgpKGNvbnRyb2wpLCB2YWxpZGF0aW9uRXJyb3IpO1xuICB9XG5cbiAgc3RhdGljIG1heExlbmd0aChtYXhMZW5ndGg6IG51bWJlciwgdmFsaWRhdGlvbkVycm9yOiBGaWVsZFZhbGlkYXRpb25FcnJvcnMgPSB7fSk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT5cbiAgICAgIG1lcmdlVmFsaWRhdGlvbkVycm9ycyhfVmFsaWRhdG9ycy5tYXhMZW5ndGgobWF4TGVuZ3RoKShjb250cm9sKSwgdmFsaWRhdGlvbkVycm9yKTtcbiAgfVxuXG4gIHN0YXRpYyBwYXR0ZXJuKFxuICAgIHBhdHRlcm46IHN0cmluZyB8IFJlZ0V4cCxcbiAgICB2YWxpZGF0aW9uRXJyb3I6IEZpZWxkVmFsaWRhdGlvbkVycm9ycyA9IHt9LFxuICApOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+XG4gICAgICBtZXJnZVZhbGlkYXRpb25FcnJvcnMoX1ZhbGlkYXRvcnMucGF0dGVybihwYXR0ZXJuKShjb250cm9sKSwgdmFsaWRhdGlvbkVycm9yKTtcbiAgfVxuXG4gIHN0YXRpYyBudWxsVmFsaWRhdG9yKCk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT5cbiAgICAgIG1lcmdlVmFsaWRhdGlvbkVycm9ycyhfVmFsaWRhdG9ycy5udWxsVmFsaWRhdG9yKGNvbnRyb2wpLCB7fSk7XG4gIH1cblxuICBzdGF0aWMgbnVsbEFzeW5jVmFsaWRhdG9yKCk6IEFzeW5jVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiBfY29udHJvbCA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8bnVsbD4ocmVzb2x2ZSA9PiB7XG4gICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIC8vIG51bGwgdmFsaWRhdG9ycyBkb2VzIG5vdGhpbmchXG4gICAgICAgIC8vIHNvIG5vIGNvbnRyb2wgaGFuZGxpbmcgbmVlZGVkIVxuICAgICAgICAvLyBjb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn1cbiJdfQ==