import { MAT_FORMAT_INPUT, MAT_NUMBER_INPUT, } from './mat-datagrid-input';
import { importProvidersFrom, LOCALE_ID, makeEnvironmentProviders, } from '@angular/core';
import { CdkDatagridDateAdapter, MAT_DATE_CLASS, matDateFormatsDefaults, } from './cdk-datagrid-date.adapter';
import deepmerge from 'deepmerge';
import moment from 'moment';
import { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MomentDateAdapter, } from '@angular/material-moment-adapter';
import { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, } from '@angular/material/core';
import { CdkDatagridRuleManager } from './cdk-datagrid-rule.manager';
import { CdkDatagridEditManager } from './cdk-datagrid-edit.manager';
import { CdkDatagridFormManager } from './cdk-datagrid-form.manager';
import { CdkDatagridDataManager } from './cdk-datagrid-data.manager';
import { ScrollingModule } from '@angular/cdk/scrolling';
export function provideDataGrid(options) {
    const optionDateFormats = options?.datepicker?.formats || {};
    const optionInputFormats = options?.input?.formats || {};
    const optionInputNumbers = options?.input?.numbers || {};
    // @todo: use https://developer.mozilla.org/en-US/docs/Web/API/structuredClone insteadof deepmerge
    const _matDateFormatsDefaults = deepmerge(matDateFormatsDefaults, optionDateFormats);
    _matDateFormatsDefaults.parse.dateInput = optionDateFormats?.display?.dateInput || 'YYYY-MM-DD';
    return makeEnvironmentProviders([
        importProvidersFrom(ScrollingModule),
        CdkDatagridFormManager,
        CdkDatagridRuleManager,
        CdkDatagridDataManager,
        CdkDatagridDateAdapter,
        CdkDatagridEditManager,
        {
            provide: DateAdapter,
            useClass: MomentDateAdapter,
            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],
        },
        { provide: MAT_FORMAT_INPUT, useValue: optionInputFormats },
        { provide: MAT_NUMBER_INPUT, useValue: optionInputNumbers },
        { provide: MAT_DATE_FORMATS, useValue: _matDateFormatsDefaults },
        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },
        { provide: LOCALE_ID, useValue: 'en-GB' },
        { provide: MAT_DATE_CLASS, useValue: moment },
        { provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: { useUtc: true } },
        ...(options?.datepicker?.providers || []),
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWRhdGFncmlkLnByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL2RhdGFncmlkL3NyYy9jZGstZGF0YWdyaWQucHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdMLGdCQUFnQixFQUNoQixnQkFBZ0IsR0FDakIsTUFBTSxzQkFBc0IsQ0FBQztBQUc5QixPQUFPLEVBRUwsbUJBQW1CLEVBQ25CLFNBQVMsRUFDVCx3QkFBd0IsR0FFekIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLHNCQUFzQixFQUN0QixjQUFjLEVBQ2Qsc0JBQXNCLEdBQ3ZCLE1BQU0sNkJBQTZCLENBQUM7QUFDckMsT0FBTyxTQUFTLE1BQU0sV0FBVyxDQUFDO0FBQ2xDLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQ0wsK0JBQStCLEVBQy9CLGlCQUFpQixHQUNsQixNQUFNLGtDQUFrQyxDQUFDO0FBQzFDLE9BQU8sRUFDTCxXQUFXLEVBQ1gsZ0JBQWdCLEVBQ2hCLGVBQWUsR0FFaEIsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFekQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxPQUF3QjtJQUN0RCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUM3RCxNQUFNLGtCQUFrQixHQUFHLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUN6RCxNQUFNLGtCQUFrQixHQUFHLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUN6RCxrR0FBa0c7SUFDbEcsTUFBTSx1QkFBdUIsR0FBRyxTQUFTLENBQUMsc0JBQXNCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUNyRix1QkFBdUIsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxTQUFTLElBQUksWUFBWSxDQUFDO0lBRWhHLE9BQU8sd0JBQXdCLENBQUM7UUFDOUIsbUJBQW1CLENBQUMsZUFBZSxDQUFDO1FBRXBDLHNCQUFzQjtRQUN0QixzQkFBc0I7UUFDdEIsc0JBQXNCO1FBQ3RCLHNCQUFzQjtRQUN0QixzQkFBc0I7UUFDdEI7WUFDRSxPQUFPLEVBQUUsV0FBVztZQUNwQixRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLElBQUksRUFBRSxDQUFDLGVBQWUsRUFBRSwrQkFBK0IsQ0FBQztTQUN6RDtRQUNELEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRTtRQUMzRCxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUU7UUFDM0QsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFO1FBQ2hFLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFO1FBQy9DLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFO1FBQ3pDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO1FBQzdDLEVBQUUsT0FBTyxFQUFFLCtCQUErQixFQUFFLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUN4RSxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLElBQUksRUFBRSxDQUFDO0tBQzFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEYXRhZ3JpZElucHV0Rm9ybWF0cyxcbiAgRGF0YWdyaWRJbnB1dE51bWJlcnMsXG4gIE1BVF9GT1JNQVRfSU5QVVQsXG4gIE1BVF9OVU1CRVJfSU5QVVQsXG59IGZyb20gJy4vbWF0LWRhdGFncmlkLWlucHV0JztcblxuaW1wb3J0IHsgUGFydGlhbERlZXAgfSBmcm9tICcuL2Nkay1kYXRhZ3JpZC50eXBlcyc7XG5pbXBvcnQge1xuICBFbnZpcm9ubWVudFByb3ZpZGVycyxcbiAgaW1wb3J0UHJvdmlkZXJzRnJvbSxcbiAgTE9DQUxFX0lELFxuICBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMsXG4gIFByb3ZpZGVyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIENka0RhdGFncmlkRGF0ZUFkYXB0ZXIsXG4gIE1BVF9EQVRFX0NMQVNTLFxuICBtYXREYXRlRm9ybWF0c0RlZmF1bHRzLFxufSBmcm9tICcuL2Nkay1kYXRhZ3JpZC1kYXRlLmFkYXB0ZXInO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHtcbiAgTUFUX01PTUVOVF9EQVRFX0FEQVBURVJfT1BUSU9OUyxcbiAgTW9tZW50RGF0ZUFkYXB0ZXIsXG59IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsLW1vbWVudC1hZGFwdGVyJztcbmltcG9ydCB7XG4gIERhdGVBZGFwdGVyLFxuICBNQVRfREFURV9GT1JNQVRTLFxuICBNQVRfREFURV9MT0NBTEUsXG4gIE1hdERhdGVGb3JtYXRzLFxufSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmltcG9ydCB7IENka0RhdGFncmlkUnVsZU1hbmFnZXIgfSBmcm9tICcuL2Nkay1kYXRhZ3JpZC1ydWxlLm1hbmFnZXInO1xuaW1wb3J0IHsgQ2RrRGF0YWdyaWRFZGl0TWFuYWdlciB9IGZyb20gJy4vY2RrLWRhdGFncmlkLWVkaXQubWFuYWdlcic7XG5pbXBvcnQgeyBDZGtEYXRhZ3JpZEZvcm1NYW5hZ2VyIH0gZnJvbSAnLi9jZGstZGF0YWdyaWQtZm9ybS5tYW5hZ2VyJztcbmltcG9ydCB7IENka0RhdGFncmlkRGF0YU1hbmFnZXIgfSBmcm9tICcuL2Nkay1kYXRhZ3JpZC1kYXRhLm1hbmFnZXInO1xuaW1wb3J0IHsgU2Nyb2xsaW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlRGF0YUdyaWQob3B0aW9uczogRGF0YWdyaWRPcHRpb25zKTogRW52aXJvbm1lbnRQcm92aWRlcnMge1xuICBjb25zdCBvcHRpb25EYXRlRm9ybWF0cyA9IG9wdGlvbnM/LmRhdGVwaWNrZXI/LmZvcm1hdHMgfHwge307XG4gIGNvbnN0IG9wdGlvbklucHV0Rm9ybWF0cyA9IG9wdGlvbnM/LmlucHV0Py5mb3JtYXRzIHx8IHt9O1xuICBjb25zdCBvcHRpb25JbnB1dE51bWJlcnMgPSBvcHRpb25zPy5pbnB1dD8ubnVtYmVycyB8fCB7fTtcbiAgLy8gQHRvZG86IHVzZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvc3RydWN0dXJlZENsb25lIGluc3RlYWRvZiBkZWVwbWVyZ2VcbiAgY29uc3QgX21hdERhdGVGb3JtYXRzRGVmYXVsdHMgPSBkZWVwbWVyZ2UobWF0RGF0ZUZvcm1hdHNEZWZhdWx0cywgb3B0aW9uRGF0ZUZvcm1hdHMpO1xuICBfbWF0RGF0ZUZvcm1hdHNEZWZhdWx0cy5wYXJzZS5kYXRlSW5wdXQgPSBvcHRpb25EYXRlRm9ybWF0cz8uZGlzcGxheT8uZGF0ZUlucHV0IHx8ICdZWVlZLU1NLUREJztcblxuICByZXR1cm4gbWFrZUVudmlyb25tZW50UHJvdmlkZXJzKFtcbiAgICBpbXBvcnRQcm92aWRlcnNGcm9tKFNjcm9sbGluZ01vZHVsZSksXG5cbiAgICBDZGtEYXRhZ3JpZEZvcm1NYW5hZ2VyLFxuICAgIENka0RhdGFncmlkUnVsZU1hbmFnZXIsXG4gICAgQ2RrRGF0YWdyaWREYXRhTWFuYWdlcixcbiAgICBDZGtEYXRhZ3JpZERhdGVBZGFwdGVyLFxuICAgIENka0RhdGFncmlkRWRpdE1hbmFnZXIsXG4gICAge1xuICAgICAgcHJvdmlkZTogRGF0ZUFkYXB0ZXIsXG4gICAgICB1c2VDbGFzczogTW9tZW50RGF0ZUFkYXB0ZXIsXG4gICAgICBkZXBzOiBbTUFUX0RBVEVfTE9DQUxFLCBNQVRfTU9NRU5UX0RBVEVfQURBUFRFUl9PUFRJT05TXSxcbiAgICB9LFxuICAgIHsgcHJvdmlkZTogTUFUX0ZPUk1BVF9JTlBVVCwgdXNlVmFsdWU6IG9wdGlvbklucHV0Rm9ybWF0cyB9LFxuICAgIHsgcHJvdmlkZTogTUFUX05VTUJFUl9JTlBVVCwgdXNlVmFsdWU6IG9wdGlvbklucHV0TnVtYmVycyB9LFxuICAgIHsgcHJvdmlkZTogTUFUX0RBVEVfRk9STUFUUywgdXNlVmFsdWU6IF9tYXREYXRlRm9ybWF0c0RlZmF1bHRzIH0sXG4gICAgeyBwcm92aWRlOiBNQVRfREFURV9MT0NBTEUsIHVzZVZhbHVlOiAnZW4tR0InIH0sXG4gICAgeyBwcm92aWRlOiBMT0NBTEVfSUQsIHVzZVZhbHVlOiAnZW4tR0InIH0sXG4gICAgeyBwcm92aWRlOiBNQVRfREFURV9DTEFTUywgdXNlVmFsdWU6IG1vbWVudCB9LFxuICAgIHsgcHJvdmlkZTogTUFUX01PTUVOVF9EQVRFX0FEQVBURVJfT1BUSU9OUywgdXNlVmFsdWU6IHsgdXNlVXRjOiB0cnVlIH0gfSxcbiAgICAuLi4ob3B0aW9ucz8uZGF0ZXBpY2tlcj8ucHJvdmlkZXJzIHx8IFtdKSxcbiAgXSk7XG59XG5cbmV4cG9ydCB0eXBlIERhdGFncmlkT3B0aW9uczxJdGVtID0gdW5rbm93bj4gPSB7XG4gIGRhdGVwaWNrZXI/OiB7XG4gICAgcHJvdmlkZXJzPzogUHJvdmlkZXJbXTtcbiAgICBmb3JtYXRzPzogUGFydGlhbERlZXA8TWF0RGF0ZUZvcm1hdHM+O1xuICB9O1xuICBpbnB1dD86IHtcbiAgICAvLyBAc2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kZS9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnRsL051bWJlckZvcm1hdFxuICAgIGZvcm1hdHM/OiBEYXRhZ3JpZElucHV0Rm9ybWF0czxJdGVtPjtcbiAgICBudW1iZXJzPzogRGF0YWdyaWRJbnB1dE51bWJlcnM8SXRlbT47XG4gIH07XG59O1xuIl19