import { Injectable } from '@angular/core';
import { getItemPayload } from './cdk-datagrid.utils';
import * as i0 from "@angular/core";
export class CdkDatagridRuleManager {
    #globalItemRules;
    setGlobalRules(itemRules) {
        this.#globalItemRules = itemRules;
    }
    canRule(item, key, actionType) {
        return this.getRule(item, key, actionType);
    }
    canValidate(item, key, actionType) {
        return !!this.canRule(item, key, actionType)?.validate;
    }
    canRender(item, key, actionType) {
        return !!this.canRule(item, key, actionType)?.render;
    }
    canDisable(item, key, actionType) {
        return !!this.canRule(item, key, actionType)?.disable;
    }
    canAction(item, key, actionType) {
        return !!this.canRule(item, key, actionType)?.action;
    }
    getActionRule(item, key, actionType) {
        const action = this.getRule(item, key, actionType)?.action;
        if (!action) {
            return null;
        }
        if (typeof action?.cond === 'function' && action.cond() === true) {
            return action;
        }
        else if (typeof action?.cond === 'boolean' && action.cond === true) {
            return action;
        }
        else if (typeof action?.cond === 'undefined') {
            return action;
        }
        else {
            return null;
        }
    }
    applyRules(item, key, actionType, formControl, initialValue) {
        const rule = this.getRule(item, key, actionType);
        this.#applyRules(rule, formControl, initialValue);
    }
    #getItemRules(item) {
        return getItemPayload(item)?.rules;
    }
    #getGlobalRules(actionType) {
        return this.#globalItemRules?.[actionType];
    }
    getRule(item, key, actionType) {
        let rules = {};
        // has global one up (e.g. override/../disable) some rules?
        const parentGlobalRules = this.#getGlobalRules(actionType) || {};
        if (parentGlobalRules)
            rules = this.#mergeRules(parentGlobalRules, rules);
        // has global override rules?
        const globalOverrideRules = this.#getGlobalRules(actionType)?.overrides?.[key] || {};
        if (globalOverrideRules)
            rules = this.#mergeRules(globalOverrideRules, rules);
        // has item one up (e.g. override/../disable) some rules?
        const parentItemRules = this.#getItemRules(item) || {};
        if (parentItemRules)
            rules = this.#mergeRules(parentItemRules, rules);
        // has item override rules?
        const itemOverrideRules = this.#getItemRules(item)?.overrides?.[key] || {};
        if (itemOverrideRules)
            rules = this.#mergeRules(itemOverrideRules, rules);
        return rules;
    }
    #mergeRules(intoRule, fromRule) {
        return {
            validate: intoRule.validate ?? fromRule.validate,
            disable: intoRule.disable ?? fromRule.disable,
            render: intoRule.render ?? fromRule.render,
            placeholder: intoRule.placeholder ?? fromRule.placeholder,
            action: intoRule.action ?? fromRule.action,
        };
    }
    #applyRules(rules, formControl, initialValue) {
        if (formControl?.value !== initialValue) {
            rules?.render === undefined && formControl?.setValue(initialValue);
            rules?.render === true && formControl?.setValue(initialValue);
        }
        if (rules?.render === false && formControl?.value !== '') {
            formControl?.setValue('');
        }
        if (rules?.disable === true && !formControl?.disabled) {
            formControl?.disable();
        }
        if (!rules?.disable && !formControl?.enabled) {
            formControl?.enable();
        }
        if (!formControl?.disabled && (rules?.validate === false || rules?.validate === undefined)) {
            formControl?.setValidators([]);
            formControl?.setAsyncValidators([]);
            formControl?.updateValueAndValidity();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.9", ngImport: i0, type: CdkDatagridRuleManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.9", ngImport: i0, type: CdkDatagridRuleManager }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.9", ngImport: i0, type: CdkDatagridRuleManager, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,